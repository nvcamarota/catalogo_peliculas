# Importando m√≥dulo os para manipular el archivo.txt (agregar y eliminar pel√≠culas)
import os

# Superclase Pel√≠cula con atributo nombre (privado), director, a√±o y g√©nero (p√∫blicos)
class Pel√≠cula:
    def __init__(self, nombre, director, a√±o, g√©nero):
        self.__nombre = nombre.title()
        self.director = director.title()
        self.a√±o = int(a√±o)
        self.g√©nero = g√©nero.title()
        
    def nombre_pel√≠cula(self):
        return self.__nombre
    
    def __str__(self):
        return f'T√≠tulo: "{self.nombre_pel√≠cula()}"\nDirector: {self.director}\nA√±o de lanzamiento: {self.a√±o}\nGen√©ro: {self.g√©nero}\n'
     
# Superclase Cat√°logoPel√≠cula con atributo p√∫blico cat√°logo, ruta de archivo con equivalencia a un archivo.txt con el nombre del cat√°logo y una lista vac√≠a de pel√≠culas
class Cat√°logoPel√≠cula:
    def __init__(self, nombre_cat√°logo):
        self.nombre_cat√°logo = nombre_cat√°logo
        self.ruta_archivo = f'{nombre_cat√°logo}.txt'
        self.pel√≠culas = []
    
# M√©todo agregar_pel√≠cula() con atributo pel√≠cula que agrega pel√≠culas al .txt de ruta_archivo
    def agregar_pel√≠cula(self, pel√≠cula):
        self.pel√≠culas.append(pel√≠cula)
        with open(self.ruta_archivo, 'a') as archivo:
            archivo.write(f'T√≠tulo: "{pel√≠cula.nombre_pel√≠cula()}", Director: {pel√≠cula.director}, A√±o de lanzamiento: {pel√≠cula.a√±o}, G√©nero: {pel√≠cula.g√©nero}\n')
    
# M√©todo listar_pel√≠culas() que lee el contenido del archivo.txt y lo imprime por consola. En el caso de no existir el archivo, imprime un mensaje
    def listar_pel√≠culas(self):
        if not os.path.exists(self.ruta_archivo):
            print('\nActualmente, no hay pel√≠culas en el cat√°logo üò¢\n')
        else:
            print('\nEstas son las pel√≠culas que se encuentran actualmente en el cat√°logo:\n')
            with open(f'{self.ruta_archivo}', 'r') as archivo:
                print(archivo.read())
    
# M√©todo eliminar_cat√°logo() que elimina el cat√°logo en caso de existir. Si el g√©nero (nombre_cat√°logo) no coincide con el dato ingresado, no se borrar√° el archivo. Si el archivo no existe, se imprime un mensaje
    def eliminar_pel√≠culas(self):
        print('\n¬øQu√© pel√≠cula(s) deseas eliminar?\n')
        
        print(f'{self.nombre_cat√°logo}\n')
        eliminando_cat√°logo = input('Ingrese el g√©nero de la(s) pel√≠cula(s) que deseas eliminar: ').title()
            
        if os.path.exists(self.ruta_archivo) and eliminando_cat√°logo == self.nombre_cat√°logo:
            os.remove(self.ruta_archivo)
            print(f'\n¬°La(s) pel√≠cula(s) del g√©nero "{self.nombre_cat√°logo}" ha(n) sido eliminada(s) con √©xito!\n')
        elif eliminando_cat√°logo != self.nombre_cat√°logo:
            print('\nEl valor ingresado es inv√°lido. Por favor, intente nuevamente.\n')
        else:
            print('\nEste g√©nero de pel√≠cula no existe.\n')
                